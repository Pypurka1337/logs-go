// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: logs.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createLog = `-- name: CreateLog :one
INSERT INTO logs (
    model,
    user_uuid,
    user_name,
    action,
    action_at,
    description
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, model, user_uuid, user_name, action, action_at, description, created_at
`

type CreateLogParams struct {
	Model       string             `json:"model"`
	UserUuid    uuid.UUID          `json:"user_uuid"`
	UserName    pgtype.Text        `json:"user_name"`
	Action      string             `json:"action"`
	ActionAt    pgtype.Timestamptz `json:"action_at"`
	Description pgtype.Text        `json:"description"`
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) (Log, error) {
	row := q.db.QueryRow(ctx, createLog,
		arg.Model,
		arg.UserUuid,
		arg.UserName,
		arg.Action,
		arg.ActionAt,
		arg.Description,
	)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.Model,
		&i.UserUuid,
		&i.UserName,
		&i.Action,
		&i.ActionAt,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getLogByID = `-- name: GetLogByID :one
SELECT id, model, user_uuid, user_name, action, action_at, description, created_at FROM logs
WHERE id = $1
`

func (q *Queries) GetLogByID(ctx context.Context, id int32) (Log, error) {
	row := q.db.QueryRow(ctx, getLogByID, id)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.Model,
		&i.UserUuid,
		&i.UserName,
		&i.Action,
		&i.ActionAt,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listLogs = `-- name: ListLogs :many
SELECT id, model, user_uuid, user_name, action, action_at, description, created_at FROM logs
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListLogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLogs(ctx context.Context, arg ListLogsParams) ([]Log, error) {
	rows, err := q.db.Query(ctx, listLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Log{}
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Model,
			&i.UserUuid,
			&i.UserName,
			&i.Action,
			&i.ActionAt,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLogsByModel = `-- name: ListLogsByModel :many
SELECT id, model, user_uuid, user_name, action, action_at, description, created_at FROM logs
WHERE model = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListLogsByModelParams struct {
	Model  string `json:"model"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListLogsByModel(ctx context.Context, arg ListLogsByModelParams) ([]Log, error) {
	rows, err := q.db.Query(ctx, listLogsByModel, arg.Model, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Log{}
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Model,
			&i.UserUuid,
			&i.UserName,
			&i.Action,
			&i.ActionAt,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLogsByUserUUID = `-- name: ListLogsByUserUUID :many
SELECT id, model, user_uuid, user_name, action, action_at, description, created_at FROM logs
WHERE user_uuid = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListLogsByUserUUIDParams struct {
	UserUuid uuid.UUID `json:"user_uuid"`
	Limit    int32     `json:"limit"`
	Offset   int32     `json:"offset"`
}

func (q *Queries) ListLogsByUserUUID(ctx context.Context, arg ListLogsByUserUUIDParams) ([]Log, error) {
	rows, err := q.db.Query(ctx, listLogsByUserUUID, arg.UserUuid, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Log{}
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Model,
			&i.UserUuid,
			&i.UserName,
			&i.Action,
			&i.ActionAt,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
